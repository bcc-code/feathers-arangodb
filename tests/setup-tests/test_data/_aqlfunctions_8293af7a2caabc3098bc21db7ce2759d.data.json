{"type":2300,"data":{"_key":"ORG::RULES","_id":"_aqlfunctions/ORG::RULES","_rev":"_d1QHugC---","code":"(function default_1(orgDetails, parentOrg) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const org = JSON.parse(JSON.stringify(orgDetails));\n    const parentSettings = (_a = parentOrg === null || parentOrg === void 0 ? void 0 : parentOrg.membershipSettings) !== null && _a !== void 0 ? _a : {};\n    function calculateSetting(setting, type) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        let nonInherited;\n        let enforced;\n        let combined;\n        switch (type) {\n            case 'rules':\n                nonInherited = filterNonInheritedRules(setting);\n                enforced = (_b = (_a = parentSettings.childOrgRules) === null || _a === void 0 ? void 0 : _a[org.type]) !== null && _b !== void 0 ? _b : {};\n                combined = Object.assign({}, nonInherited, enforced);\n                break;\n            case 'childOrgRules': {\n                const rules = setting;\n                nonInherited = {\n                    organisation: filterNonInheritedRules(rules === null || rules === void 0 ? void 0 : rules.organisation),\n                    church: filterNonInheritedRules(rules === null || rules === void 0 ? void 0 : rules.church),\n                    club: filterNonInheritedRules(rules === null || rules === void 0 ? void 0 : rules.club),\n                };\n                enforced = (_c = parentSettings.childOrgRules) !== null && _c !== void 0 ? _c : {};\n                combined = {\n                    organisation: Object.assign({}, nonInherited.organisation, enforced.organisation),\n                    church: Object.assign({}, nonInherited.church, enforced.church),\n                    club: Object.assign({}, nonInherited.club, enforced.club),\n                };\n                break;\n            }\n            case 'managementLinks':\n            case 'registrationLinks': {\n                const links = setting;\n                if (links) {\n                    nonInherited = links.filter(l => l.enforcedByOrg_id === org._id);\n                }\n                else {\n                    nonInherited = [];\n                }\n                enforced = (_e = (_d = parentOrg === null || parentOrg === void 0 ? void 0 : parentOrg.membershipSettings) === null || _d === void 0 ? void 0 : _d[type]) !== null && _e !== void 0 ? _e : [];\n                combined = [...nonInherited, ...enforced];\n                break;\n            }\n            case 'registrationConsents': {\n                const consents = setting;\n                if (consents) {\n                    nonInherited = consents.filter(c => c.enforcedByOrg_id === org._id);\n                }\n                else {\n                    nonInherited = [];\n                }\n                enforced = (_g = (_f = parentOrg === null || parentOrg === void 0 ? void 0 : parentOrg.membershipSettings) === null || _f === void 0 ? void 0 : _f.registrationConsents) !== null && _g !== void 0 ? _g : [];\n                combined = [...nonInherited, ...enforced];\n                break;\n            }\n        }\n        return combined;\n    }\n    function filterNonInheritedRules(rules) {\n        const nonInheritedableTypes = ['membershipEnabled', 'inheritChildMembership'];\n        if (!rules) {\n            return {};\n        }\n        const nonInherited = {};\n        for (const [key, value] of Object.entries(rules)) {\n            if (nonInheritedableTypes.includes(key) || (value && value.enforcedByOrg_id === org._id)) {\n                nonInherited[key] = value;\n            }\n        }\n        return nonInherited;\n    }\n    org.membershipSettings = {\n        rules: calculateSetting((_b = org.membershipSettings) === null || _b === void 0 ? void 0 : _b.rules, 'rules'),\n        childOrgRules: calculateSetting((_c = org.membershipSettings) === null || _c === void 0 ? void 0 : _c.childOrgRules, 'childOrgRules'),\n        approvalRoles: (_d = org.membershipSettings) === null || _d === void 0 ? void 0 : _d.approvalRoles,\n        forms: (_e = org.membershipSettings) === null || _e === void 0 ? void 0 : _e.forms,\n        managementLinks: calculateSetting((_f = org.membershipSettings) === null || _f === void 0 ? void 0 : _f.managementLinks, 'managementLinks'),\n        registrationLinks: calculateSetting((_g = org.membershipSettings) === null || _g === void 0 ? void 0 : _g.registrationLinks, 'registrationLinks'),\n        registrationConsents: calculateSetting((_h = org.membershipSettings) === null || _h === void 0 ? void 0 : _h.registrationConsents, 'registrationConsents'),\n    };\n    return org;\n}\n\n)","isDeterministic":true,"name":"ORG::RULES"}}
{"type":2300,"data":{"_key":"PERSON::UPDATE_SYNC_STATUS_AND_LAST_CHANGED_DATE","_id":"_aqlfunctions/PERSON::UPDATE_SYNC_STATUS_AND_LAST_CHANGED_DATE","_rev":"_d1QHugG---","code":"((person) => {\n    const crypto = require('@arangodb/crypto');\n    const personCopy = JSON.parse(JSON.stringify(person));\n    delete personCopy.syncStatus;\n    delete personCopy.hash;\n    delete personCopy.lastChangedDate;\n    delete personCopy._rev;\n    delete personCopy.activeRole;\n    delete personCopy.tempSecret;\n    delete personCopy.verifiedCode;\n    delete personCopy.secretInUse;\n    const hash = crypto.md5(JSON.stringify(personCopy));\n    if (hash !== person.hash) {\n        person.lastChangedDate = new Date().toISOString();\n        person.syncStatus = 'sync_required';\n    }\n    person.hash = hash;\n    return person;\n}\n\n)","isDeterministic":true,"name":"PERSON::UPDATE_SYNC_STATUS_AND_LAST_CHANGED_DATE"}}
{"type":2300,"data":{"_key":"PERSON::ROLES","_id":"_aqlfunctions/PERSON::ROLES","_rev":"_d1QHuf6--A","code":"(function default_1(roles, currentChurch) {\n    var _a, _b;\n    const rolesFormatted = [];\n    if (currentChurch) {\n        const memberRole = {\n            _id: 'role/0',\n            _key: '0',\n            name: 'Member',\n            enumName: 'Member',\n            org_ids: [currentChurch.org_id],\n            orgIDs: [currentChurch.orgID],\n            scope: 'churchLevel',\n            securityLevel: 8,\n        };\n        rolesFormatted.push(memberRole);\n    }\n    for (const r of roles) {\n        const existingIndex = rolesFormatted.findIndex(existing => existing.enumName === r.enumName);\n        const roleOrgID = r.personRole.orgID ? [r.personRole.orgID] : [];\n        const roleOrg_id = r.personRole.org_id ? [r.personRole.org_id] : [];\n        if (existingIndex > 0) {\n            const existingRoleRef = JSON.stringify(rolesFormatted[existingIndex]);\n            const existingRole = JSON.parse(existingRoleRef);\n            (_a = existingRole.orgIDs) === null || _a === void 0 ? void 0 : _a.push(...roleOrgID);\n            (_b = existingRole.org_ids) === null || _b === void 0 ? void 0 : _b.push(...roleOrg_id);\n            rolesFormatted[existingIndex] = existingRole;\n        }\n        else {\n            const item = {\n                _id: r._id,\n                _key: r._key,\n                name: r.name,\n                enumName: r.enumName,\n                orgIDs: roleOrgID,\n                org_ids: roleOrg_id,\n                scope: r.personRole.scope,\n                securityLevel: r.securityLevel,\n            };\n            rolesFormatted.push(item);\n        }\n    }\n    rolesFormatted.sort((a, b) => {\n        const textA = a.enumName;\n        const textB = b.enumName;\n        return textA < textB ? -1 : textA > textB ? 1 : 0;\n    });\n    return rolesFormatted;\n}\n\n)","isDeterministic":true,"name":"PERSON::ROLES"}}
{"type":2300,"data":{"_key":"PERSON::GUARDIANS","_id":"_aqlfunctions/PERSON::GUARDIANS","_rev":"_d1QHuf6---","code":"(function calculateGuardians(personOriginal) {\n    let Gender;\n    (function (Gender) {\n        Gender[\"Female\"] = \"Female\";\n        Gender[\"Male\"] = \"Male\";\n    })(Gender || (Gender = {}));\n    let ActiveStatus;\n    (function (ActiveStatus) {\n        ActiveStatus[\"Active\"] = \"Active\";\n        ActiveStatus[\"Inactive\"] = \"Inactive\";\n        ActiveStatus[\"Duplicate\"] = \"Duplicate\";\n        ActiveStatus[\"Deceased\"] = \"Deceased\";\n        ActiveStatus[\"Contact\"] = \"Contact\";\n    })(ActiveStatus || (ActiveStatus = {}));\n    const person = JSON.parse(JSON.stringify(personOriginal));\n    const relatedMembers = [\n        ...person.related.children,\n        ...person.related.dependents,\n        ...person.related.guardians,\n        ...person.related.parents,\n        ...person.related.spouse,\n    ];\n    function checkIfPersonQualifiesToBeGuardian(person, relatedPerson) {\n        if (relatedPerson === undefined) {\n            return false;\n        }\n        const relationCanAdministrate = relatedPerson.relation[relatedPerson._id].canAdministrate.value;\n        if (relatedPerson.activeStatus === ActiveStatus.Active &&\n            relationCanAdministrate &&\n            relatedPerson.relation.active) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    const hasParentOrGuardianThatCanAdministrate = relatedMembers.some((r) => {\n        return r.relation[r._id].canAdministrate.value === true && checkIfPersonQualifiesToBeGuardian(person, r);\n    });\n    if (!hasParentOrGuardianThatCanAdministrate) {\n        person.guardianID = person.personID;\n        person.guardianDisplayName = person.displayName;\n        person.secondGuardianID = 0;\n        person.secondGuardianDisplayName = '';\n    }\n    if (hasParentOrGuardianThatCanAdministrate) {\n        let mother;\n        let father;\n        person.related.parents.forEach(parent => {\n            if (checkIfPersonQualifiesToBeGuardian(person, parent)) {\n                if (parent.gender === Gender.Male) {\n                    father = parent;\n                }\n                else {\n                    mother = parent;\n                }\n            }\n        });\n        if (father !== undefined && mother !== undefined) {\n            person.guardianID = father.personID;\n            person.guardianDisplayName = father.displayName;\n            person.secondGuardianID = mother.personID;\n            person.secondGuardianDisplayName = mother.displayName;\n        }\n        if (father === undefined && mother !== undefined) {\n            person.guardianID = mother.personID;\n            person.guardianDisplayName = mother.displayName;\n            person.secondGuardianID = 0;\n            person.secondGuardianDisplayName = '';\n        }\n        if (father !== undefined && mother === undefined) {\n            person.guardianID = father.personID;\n            person.guardianDisplayName = father.displayName;\n            person.secondGuardianID = 0;\n            person.secondGuardianDisplayName = '';\n        }\n        const guardian = person.related.guardians[0];\n        if (checkIfPersonQualifiesToBeGuardian(person, guardian)) {\n            person.guardianID = guardian.personID;\n            person.guardianDisplayName = guardian.displayName;\n            person.secondGuardianID = 0;\n            person.secondGuardianDisplayName = '';\n        }\n    }\n    const spouse = person.related.spouse[0];\n    if (spouse !== undefined &&\n        spouse.relation.active &&\n        spouse.gender === Gender.Male &&\n        spouse.activeStatus === ActiveStatus.Active) {\n        person.guardianID = spouse.personID;\n        person.guardianDisplayName = spouse.displayName;\n        person.secondGuardianID = person.personID;\n        person.secondGuardianDisplayName = person.displayName;\n    }\n    return person;\n}\n\n)","isDeterministic":true,"name":"PERSON::GUARDIANS"}}
{"type":2300,"data":{"_key":"PERSON::DAVIDSCOLUMN","_id":"_aqlfunctions/PERSON::DAVIDSCOLUMN","_rev":"_d1QHuf2---","code":"((personOriginal) => {\n    const person = JSON.parse(JSON.stringify(personOriginal));\n    let MaritalStatus;\n    (function (MaritalStatus) {\n        MaritalStatus[\"Unknown\"] = \"Unknown\";\n        MaritalStatus[\"Single\"] = \"Single\";\n        MaritalStatus[\"Married\"] = \"Married\";\n        MaritalStatus[\"Widowed\"] = \"Widowed\";\n        MaritalStatus[\"Separated\"] = \"Separated\";\n        MaritalStatus[\"SingleParent\"] = \"SingleParent\";\n    })(MaritalStatus || (MaritalStatus = {}));\n    let ActiveStatus;\n    (function (ActiveStatus) {\n        ActiveStatus[\"Active\"] = \"Active\";\n        ActiveStatus[\"Inactive\"] = \"Inactive\";\n        ActiveStatus[\"Duplicate\"] = \"Duplicate\";\n        ActiveStatus[\"Deceased\"] = \"Deceased\";\n        ActiveStatus[\"Contact\"] = \"Contact\";\n    })(ActiveStatus || (ActiveStatus = {}));\n    let DavidsColumnCategory;\n    (function (DavidsColumnCategory) {\n        DavidsColumnCategory[\"DC-Couple>=65Years\"] = \"DC-Couple>=65Years\";\n        DavidsColumnCategory[\"DS-Couple<65Years\"] = \"DS-Couple<65Years\";\n        DavidsColumnCategory[\"DC-Single,>=65Years\"] = \"DC-Single,>=65Years\";\n        DavidsColumnCategory[\"DC-Single,23-64Years\"] = \"DC-Single,23-64Years\";\n        DavidsColumnCategory[\"DC-Single,0-22Years\"] = \"DC-Single,0-22Years\";\n        DavidsColumnCategory[\"DC-SingleGuardian\"] = \"DC-SingleGuardian\";\n        DavidsColumnCategory[\"DC-NoCategory\"] = \"DC-NoCategory\";\n    })(DavidsColumnCategory || (DavidsColumnCategory = {}));\n    let DavidsColumnScenarios;\n    (function (DavidsColumnScenarios) {\n        DavidsColumnScenarios[DavidsColumnScenarios[\"Married/Seperated >= 65\"] = 0.25] = \"Married/Seperated >= 65\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"Widower >= 65\"] = 0.25] = \"Widower >= 65\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"Married < 65, spouse >= 65\"] = 0.25] = \"Married < 65, spouse >= 65\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"Married/Seperated < 65\"] = 0.5] = \"Married/Seperated < 65\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"Widower < 65\"] = 0.5] = \"Widower < 65\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"Single >= 65\"] = 0.5] = \"Single >= 65\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"Single < 65\"] = 1] = \"Single < 65\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"NotMarried < 65, child or dependant < 18\"] = 0.5] = \"NotMarried < 65, child or dependant < 18\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"NotMarried > 65, child or dependant < 18\"] = 0.25] = \"NotMarried > 65, child or dependant < 18\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"All < 23\"] = 0] = \"All < 23\";\n        DavidsColumnScenarios[DavidsColumnScenarios[\"Ignored\"] = 0] = \"Ignored\";\n    })(DavidsColumnScenarios || (DavidsColumnScenarios = {}));\n    function marriedOrSeperateOrSingleParentdMemberAbove65(member) {\n        let memberFalsWithinThisScenario = false;\n        if ((member.maritalStatus === MaritalStatus.Married ||\n            member.maritalStatus === MaritalStatus.Separated ||\n            member.maritalStatus === MaritalStatus.SingleParent) &&\n            member.age >= 65) {\n            memberFalsWithinThisScenario = true;\n        }\n        else {\n            memberFalsWithinThisScenario = false;\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['Married/Seperated >= 65'],\n                category: DavidsColumnCategory['DC-Couple>=65Years'],\n            },\n        };\n        return result;\n    }\n    function widowerMemberAbove65(member) {\n        let memberFalsWithinThisScenario = false;\n        if (member.maritalStatus === MaritalStatus.Widowed && member.age >= 65) {\n            memberFalsWithinThisScenario = true;\n        }\n        else {\n            memberFalsWithinThisScenario = false;\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['Widower >= 65'],\n                category: DavidsColumnCategory['DC-Single,>=65Years'],\n            },\n        };\n        return result;\n    }\n    function marriedMemberBelow65WithSpouseAbove65(member) {\n        const spouse = member.related.spouse[0];\n        let memberFalsWithinThisScenario = false;\n        if (spouse !== undefined) {\n            if (member.maritalStatus === MaritalStatus.Married && member.age < 65 && spouse.age >= 65) {\n                memberFalsWithinThisScenario = true;\n            }\n            else {\n                memberFalsWithinThisScenario = false;\n            }\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['Married < 65, spouse >= 65'],\n                category: DavidsColumnCategory['DC-Couple>=65Years'],\n            },\n        };\n        return result;\n    }\n    function marriedOrSeperatedOrSingleParentMemberBelow65(member) {\n        let memberFalsWithinThisScenario = false;\n        if ((member.maritalStatus === MaritalStatus.Married ||\n            member.maritalStatus === MaritalStatus.Separated ||\n            member.maritalStatus === MaritalStatus.SingleParent) &&\n            member.age < 65) {\n            memberFalsWithinThisScenario = true;\n        }\n        else {\n            memberFalsWithinThisScenario = false;\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['Married/Seperated < 65'],\n                category: DavidsColumnCategory['DS-Couple<65Years'],\n            },\n        };\n        return result;\n    }\n    function notMarriedMemberBelow65WithDependantBelow18(member) {\n        let memberFalsWithinThisScenario = false;\n        for (const child of member.related.children) {\n            if (member.maritalStatus !== MaritalStatus.Married && member.age < 65 && child.age < 18) {\n                memberFalsWithinThisScenario = true;\n                break;\n            }\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['NotMarried < 65, child or dependant < 18'],\n                category: DavidsColumnCategory['DC-SingleGuardian'],\n            },\n        };\n        return result;\n    }\n    function notMarriedMemberAbove65WithDependantBelow18(member) {\n        let memberFalsWithinThisScenario = false;\n        for (const child of member.related.children) {\n            if (member.maritalStatus !== MaritalStatus.Married && member.age >= 65 && child.age < 18) {\n                memberFalsWithinThisScenario = true;\n                break;\n            }\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['NotMarried > 65, child or dependant < 18'],\n                category: DavidsColumnCategory['DC-SingleGuardian'],\n            },\n        };\n        return result;\n    }\n    function widowerMemberBelow65(member) {\n        let memberFalsWithinThisScenario = false;\n        if (member.maritalStatus === MaritalStatus.Widowed && member.age < 65) {\n            memberFalsWithinThisScenario = true;\n        }\n        else {\n            memberFalsWithinThisScenario = false;\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['Widower < 65'],\n                category: DavidsColumnCategory['DC-Single,23-64Years'],\n            },\n        };\n        return result;\n    }\n    function singleMemberAbove65(member) {\n        let memberFalsWithinThisScenario = false;\n        if (member.maritalStatus === MaritalStatus.Single && member.age >= 65) {\n            memberFalsWithinThisScenario = true;\n        }\n        else {\n            memberFalsWithinThisScenario = false;\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['Single >= 65'],\n                category: DavidsColumnCategory['DC-Single,>=65Years'],\n            },\n        };\n        return result;\n    }\n    function singleMemberBelow65(member) {\n        let memberFalsWithinThisScenario = false;\n        if (member.maritalStatus === MaritalStatus.Single && member.age < 65) {\n            memberFalsWithinThisScenario = true;\n        }\n        else {\n            memberFalsWithinThisScenario = false;\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['Single < 65'],\n                category: DavidsColumnCategory['DC-Single,23-64Years'],\n            },\n        };\n        return result;\n    }\n    function memberBelow23(member) {\n        let memberFalsWithinThisScenario = false;\n        if (member.age < 23) {\n            memberFalsWithinThisScenario = true;\n        }\n        else {\n            memberFalsWithinThisScenario = false;\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['All < 23'],\n                category: DavidsColumnCategory['DC-NoCategory'],\n            },\n        };\n        return result;\n    }\n    function notActiveMembers(member) {\n        let memberFalsWithinThisScenario = false;\n        if (member.activeStatus !== ActiveStatus.Active) {\n            memberFalsWithinThisScenario = true;\n        }\n        else {\n            memberFalsWithinThisScenario = false;\n        }\n        // Create and populate result object\n        const result = {\n            result: memberFalsWithinThisScenario,\n            davidsColumnValue: {\n                count: DavidsColumnScenarios['Ignored'],\n                category: DavidsColumnCategory['DC-NoCategory'],\n            },\n        };\n        return result;\n    }\n    // It is important that these function run in the sequence they are placed in the array\n    const scenarios = [\n        notActiveMembers,\n        memberBelow23,\n        notMarriedMemberBelow65WithDependantBelow18,\n        notMarriedMemberAbove65WithDependantBelow18,\n        marriedOrSeperateOrSingleParentdMemberAbove65,\n        widowerMemberAbove65,\n        marriedMemberBelow65WithSpouseAbove65,\n        marriedOrSeperatedOrSingleParentMemberBelow65,\n        widowerMemberBelow65,\n        singleMemberAbove65,\n        singleMemberBelow65,\n    ];\n    let davidsColumnAnswer = {};\n    for (const scenario of scenarios) {\n        const answerFromScenario = scenario(person);\n        if (answerFromScenario.result) {\n            davidsColumnAnswer = answerFromScenario;\n            break;\n        }\n    }\n    person.davidsColumn = davidsColumnAnswer.davidsColumnValue;\n    return person;\n}\n\n)","isDeterministic":true,"name":"PERSON::DAVIDSCOLUMN"}}
{"type":2300,"data":{"_key":"MEMBERSHIP_STATUS::FORMAT","_id":"_aqlfunctions/MEMBERSHIP_STATUS::FORMAT","_rev":"_d1QHug----","code":"(function default_1(person, affiliation, membershipAction, membership, actionOfMembership) {\n    var _a, _b;\n    const personData = {\n        _key: person._key,\n        applicantID: person.personID,\n        applicantName: person.displayName,\n    };\n    if (membership) {\n        const startDate = membership.startDate;\n        const requestDate = (_a = actionOfMembership === null || actionOfMembership === void 0 ? void 0 : actionOfMembership.process.steps[0]) === null || _a === void 0 ? void 0 : _a.performedAt;\n        const org_id = membership._to;\n        return Object.assign(Object.assign({}, personData), { membershipStatus: 'registered', startDate,\n            requestDate,\n            org_id });\n    }\n    if (membershipAction) {\n        const requestDate = (_b = membershipAction.process.steps[0]) === null || _b === void 0 ? void 0 : _b.performedAt;\n        const org_id = affiliation._to;\n        return Object.assign(Object.assign({}, personData), { membershipStatus: 'pending', requestDate,\n            org_id });\n    }\n    return Object.assign(Object.assign({}, personData), { membershipStatus: 'participant', org_id: affiliation._to });\n}\n\n)","isDeterministic":true,"name":"MEMBERSHIP_STATUS::FORMAT"}}
{"type":2300,"data":{"_key":"PERSON::CURRENTCHURCH","_id":"_aqlfunctions/PERSON::CURRENTCHURCH","_rev":"_d1QHufu---","code":"(function calculateActiveAffiliation(affiliations) {\n    function formatChurch(activeAff) {\n        return {\n            _id: activeAff._id,\n            _key: activeAff._key,\n            _to: activeAff._to,\n            _from: activeAff._from,\n            active: activeAff.active,\n            startDate: activeAff.startDate,\n            endDate: activeAff.endDate,\n            name: activeAff.org.name,\n            orgID: activeAff.org.orgID,\n            org_id: activeAff.org._id,\n            visitingAddress: activeAff.org.visitingAddress,\n        };\n    }\n    // We can alwasy assume that the affiliations are sorted from oldest to newest\n    // this has been done in the database query\n    const copyOfAffiliations = JSON.parse(JSON.stringify(affiliations));\n    const result = {\n        churchID: 0,\n        church: null,\n        affiliations: [],\n    };\n    if (copyOfAffiliations.length === 0)\n        return result;\n    let church = {};\n    const newestStartDate = new Date(copyOfAffiliations[0].startDate);\n    if (newestStartDate.getTime() > Date.now()) {\n        church = copyOfAffiliations[1];\n        if (church !== undefined) {\n            copyOfAffiliations[1].active = true;\n        }\n    }\n    else {\n        church = copyOfAffiliations[0];\n        copyOfAffiliations[0].active = true;\n    }\n    // Set archived value\n    copyOfAffiliations.forEach(affiliation => {\n        if (affiliation.endDate) {\n            const endDate = new Date(affiliation.endDate);\n            if (endDate.getTime() < Date.now()) {\n                affiliation.archived = true;\n            }\n            else {\n                affiliation.archived = false;\n            }\n        }\n    });\n    result.church = church !== undefined ? formatChurch(church) : undefined;\n    result.affiliations = copyOfAffiliations;\n    result.churchID = result.church !== undefined ? result.church.orgID : 0;\n    return result;\n}\n\n)","isDeterministic":true,"name":"PERSON::CURRENTCHURCH"}}
{"type":2300,"data":{"_key":"PERSON::FAMILY","_id":"_aqlfunctions/PERSON::FAMILY","_rev":"_d1QHufy---","code":"(function default_1(personOriginal) {\n    const person = JSON.parse(JSON.stringify(personOriginal));\n    const relatedMembers = [\n        ...person.related.children,\n        ...person.related.dependents,\n        ...person.related.guardians,\n        ...person.related.parents,\n        ...person.related.spouse,\n    ];\n    for (const relatedMember of relatedMembers) {\n        relatedMember.relation[person._id] === undefined\n            ? (relatedMember.relation[person._id] = { canAdministrate: { value: false } })\n            : relatedMember;\n        relatedMember.relation[relatedMember._id] === undefined\n            ? (relatedMember.relation[relatedMember._id] = { canAdministrate: { value: false } })\n            : relatedMember;\n        relatedMember.relation.active === undefined ? (relatedMember.relation.active = true) : relatedMember;\n    }\n    person.related.spouse.forEach(spouse => {\n        spouse.relation.label = 'Spouse';\n        if (!spouse.relation[person._id].canAdministrate.manualOverride) {\n            spouse.relation[person._id].canAdministrate = { value: false };\n        }\n        if (!spouse.relation[spouse._id].canAdministrate.manualOverride) {\n            spouse.relation[spouse._id].canAdministrate = { value: false };\n        }\n    });\n    person.related.children.forEach(child => {\n        child.relation.label = 'Child';\n        if (child.age < 18 && !child.relation[person._id].canAdministrate.manualOverride) {\n            child.relation[person._id].canAdministrate = { value: true };\n        }\n    });\n    person.related.dependents.forEach(dependent => {\n        dependent.relation.label = 'Dependent';\n        if (!dependent.relation[person._id].canAdministrate.manualOverride) {\n            dependent.relation[person._id].canAdministrate = { value: true };\n        }\n    });\n    person.related.guardians.forEach(guardian => {\n        if (guardian.relation.type === 'contactDependentOf')\n            guardian.relation.label = 'Contact Person';\n        else if (guardian.relation.type === 'legalDependentOf')\n            guardian.relation.label = 'Legal Guardian';\n        else if (guardian.relation.type === 'fosterChildOf')\n            guardian.relation.label = 'Foster Parent';\n        if (!guardian.relation[person._id].canAdministrate.manualOverride) {\n            guardian.relation[person._id].canAdministrate = { value: false };\n        }\n        if (!guardian.relation[guardian._id].canAdministrate.manualOverride) {\n            guardian.relation[guardian._id].canAdministrate = { value: true };\n        }\n    });\n    person.related.parents.forEach(parent => {\n        parent.relation.label = 'Parent';\n        if (!parent.relation[person._id].canAdministrate.manualOverride) {\n            parent.relation[person._id].canAdministrate = { value: false };\n        }\n        if (person.age < 18 && !parent.relation[parent._id].canAdministrate.manualOverride) {\n            parent.relation[parent._id].canAdministrate = { value: true };\n        }\n    });\n    return person;\n}\n\n)","isDeterministic":true,"name":"PERSON::FAMILY"}}
